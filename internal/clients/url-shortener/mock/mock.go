// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/clients/url-shortener/url-shortener.go

// Package mock_urlShortener is a generated GoMock package.
package mock_urlShortener

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUrlShortener is a mock of UrlShortener interface.
type MockUrlShortener struct {
	ctrl     *gomock.Controller
	recorder *MockUrlShortenerMockRecorder
}

// MockUrlShortenerMockRecorder is the mock recorder for MockUrlShortener.
type MockUrlShortenerMockRecorder struct {
	mock *MockUrlShortener
}

// NewMockUrlShortener creates a new mock instance.
func NewMockUrlShortener(ctrl *gomock.Controller) *MockUrlShortener {
	mock := &MockUrlShortener{ctrl: ctrl}
	mock.recorder = &MockUrlShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlShortener) EXPECT() *MockUrlShortenerMockRecorder {
	return m.recorder
}

// DeleteURL mocks base method.
func (m *MockUrlShortener) DeleteURL(ctx context.Context, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", ctx, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockUrlShortenerMockRecorder) DeleteURL(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockUrlShortener)(nil).DeleteURL), ctx, alias)
}

// SaveURL mocks base method.
func (m *MockUrlShortener) SaveURL(ctx context.Context, url, alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, url, alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockUrlShortenerMockRecorder) SaveURL(ctx, url, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockUrlShortener)(nil).SaveURL), ctx, url, alias)
}
